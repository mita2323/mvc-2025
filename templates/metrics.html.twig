{% extends 'base.html.twig' %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <main>
        <div class="metrics">
            <h1>Metrics</h1>

            <h2>Introduktion</h2>
            <h3>Codestyle</h3>
            <p>
                Codestyle handlar om reglerna för hur koden ska se ut - till exempel indentering, namngivning och struktur.
                Har man bra kodstil blir koden lätt att läsa, förstå och underhålla.
            </p>
            <h3>Coverage</h3>
            <p>
                Coverage handlar om testtäckning och den visar hur stor del av koden som testas. En hög täckningsprocent betyder
                att en stor procent av koden testas för fel och buggar, vilket gör koden mer pålitlig.
            </p>
            <h3>Complexity</h3>
            <p>
                Cyklomatisk komplexitet visar hur krånglig koden är, ju högre komplexitet koden har, desto svårare blir koden att 
                förstå, testa och underhålla. En rekommenderad gräns är att hålla sig under 10.
            </p>
            <h3>Cohesion</h3>
            <p>
                Cohesion betyder att en del av koden fokuserar på en enskild uppgift. Hög cohesion innebär att alla delar samarbetar
                mot samma syfte vilket gör koden  mer återanvändbar och lättare att förstå.
            </p>
            <h3>Coupling</h3>
            <p>
                Coupling handlar om hur starkt delar av koden är beroende av varandra. Om delar av koden har hög coupling kan det
                bli svårt att ändra en del utan att påverka andra. Låg coupling möjliggör oberoende kod utveckling och testning.
            </p>
            <h3>CRAP</h3>
            <p>
                CRAP står för Change Risk Anti-Patterns och är ett måt på hur riskabel koden är att ändra, baserat på både 
                complexity och coverage. Ett högt CRAP-värde betyder att koden är både svår att testa och riskabel att ändra.
            </p>

            <h2>Phpmetrics</h2>
            <p>PhpMetrics ger en översikt över kvaliteten på PHP koden och efter att ha analyserad min kod med Phpmetrics har 
            jag hittat tre förbättringsområden i koden, baserat på mätvärden från PhpMetrics:</p>
            
            <p style="text-indent: 1.5em;">
                1. Visualiseringen över Maintainabiliy/Complexity visar att flera filer i mitt projekt har låg underhållbarhet kombinerat
                med hög komplexitet. Dessa filer representeras av stora röda cirklar i bilden, och ju större cirkeln är desto högre är den 
                cyklomatiska komplexiteten. 
            </p>
            <p style="text-indent: 1.5em;">
                2. En annan område som har förbättringspotential är den genomsnittliga cyklomatiska komplexiteten per klass 
                som ligger på 4.80. Detta tyder på att metoder och klasser innehåller många logiska grener som till exempel 
                if-satser och loopar, vilket gör koden svårare att testa och ökar risken för buggar. Man kan förbättre detta 
                genom att bryta ner komplexa metoder i mindre funktioner.
            </p>
            <p style="text-indent: 1.5em;">
                3. En tredje förbättringsområde är violations, där fanns det 7 varningar och 2 errors. Även om de inte är kritiska
                kan det leda till problem i framtiden.
            </p>


            <div class="phpmetrics">
                <a href="{{ asset('images/phpmetrics.png') }}" target="_blank">
                    <img src="{{ asset('images/phpmetrics.png') }}" alt="Phpmetrics">
                </a>
            </div>


            <h2>Scrutinizer</h2>
            <div class="scrutinizer">
                
            </div>

        </div>
    </main>
{% endblock %}