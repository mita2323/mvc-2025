{% extends 'base.html.twig' %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <main>
        <div class="metrics">
            <h1>Metrics</h1>

            <h2>Introduktion</h2>
            <h3>Codestyle</h3>
            <p>
                Codestyle handlar om reglerna för hur koden ska se ut - till exempel indentering, namngivning och struktur.
                Har man bra kodstil blir koden lätt att läsa, förstå och underhålla.
            </p>
            <h3>Coverage</h3>
            <p>
                Coverage handlar om testtäckning och den visar hur stor del av koden som testas. En hög täckningsprocent betyder
                att en stor procent av koden testas för fel och buggar, vilket gör koden mer pålitlig.
            </p>
            <h3>Complexity</h3>
            <p>
                Cyklomatisk komplexitet visar hur krånglig koden är, ju högre komplexitet koden har, desto svårare blir koden att 
                förstå, testa och underhålla. En rekommenderad gräns är att hålla sig under 10.
            </p>
            <h3>Cohesion</h3>
            <p>
                Cohesion betyder att en del av koden fokuserar på en enskild uppgift. Hög cohesion innebär att alla delar samarbetar
                mot samma syfte vilket gör koden  mer återanvändbar och lättare att förstå.
            </p>
            <h3>Coupling</h3>
            <p>
                Coupling handlar om hur starkt delar av koden är beroende av varandra. Om delar av koden har hög coupling kan det
                bli svårt att ändra en del utan att påverka andra. Låg coupling möjliggör oberoende kod utveckling och testning.
            </p>
            <h3>CRAP</h3>
            <p>
                CRAP står för Change Risk Anti-Patterns och är ett måt på hur riskabel koden är att ändra, baserat på både 
                complexity och coverage. Ett högt CRAP-värde betyder att koden är både svår att testa och riskabel att ändra.
            </p>

            <h2>Phpmetrics</h2>
            <p>PhpMetrics ger en översikt över kvaliteten på PHP koden och efter att ha analyserad min kod med Phpmetrics har 
            jag hittat tre förbättringsområden i koden, baserat på mätvärden från PhpMetrics:</p>
            
            <p style="text-indent: 1.5em;">
                1. Visualiseringen över Maintainabiliy/Complexity visar att flera filer i mitt projekt har låg underhållbarhet kombinerat
                med hög komplexitet. Dessa filer representeras av stora röda cirklar i bilden, och ju större cirkeln är desto högre är den 
                cyklomatiska komplexiteten. 
            </p>
            <p style="text-indent: 1.5em;">
                2. En annan område som har förbättringspotential är den genomsnittliga cyklomatiska komplexiteten per klass 
                som ligger på 4.80. Detta tyder på att metoder och klasser innehåller många logiska grener som till exempel 
                if-satser och loopar, vilket gör koden svårare att testa och ökar risken för buggar. Man kan förbättre detta 
                genom att bryta ner komplexa metoder i mindre funktioner.
            </p>
            <p style="text-indent: 1.5em;">
                3. En tredje förbättringsområde är violations, där fanns det 7 varningar och 2 errors. Även om de inte är kritiska
                kan det leda till problem i framtiden.
            </p>


            <div class="phpmetrics">
                <a href="{{ asset('images/phpmetrics.png') }}" target="_blank">
                    <img src="{{ asset('images/phpmetrics.png') }}" alt="Phpmetrics">
                </a>
            </div>


            <h2>Scrutinizer</h2>
            <div class="scrutinizer">
                <a href="https://scrutinizer-ci.com/g/mita2323/mvc-2025/">
                    <img
                        src="https://scrutinizer-ci.com/g/mita2323/mvc-2025/badges/quality-score.png?b=main"
                        alt="Scrutinizer Code Quality">
                </a>
                <a href="https://scrutinizer-ci.com/g/mita2323/mvc-2025/code-structure/main/code-coverage">
                    <img
                        src="https://scrutinizer-ci.com/g/mita2323/mvc-2025/badges/coverage.png?b=main"
                        alt="Scrutinizer Code Coverage">
                </a>
                <a href="https://scrutinizer-ci.com/g/mita2323/mvc-2025/">
                    <img
                        src="https://scrutinizer-ci.com/g/mita2323/mvc-2025/badges/build.png?b=main"
                        alt="Scrutinizer Build Status">
                    <img
                        src="https://scrutinizer-ci.com/g/mita2323/mvc-2025/badges/code-intelligence.svg?b=main"
                        alt="Scrutinizer Code Intelligence">
                </a>
            </div>

            <p>
                Min kod får betyget 9.96 från scrutinizer.
            </p>
            <div class="report-img">
                <a href="{{ asset('images/score.png') }}" target="_blank">
                    <img src="{{ asset('images/score.png') }}" alt="Score">
                </a>
            </div>

            <p>
                Min Coverage ligger bara på 14% men det beror på att bara Dice/ och Game/ är testad. Min Dice/ folder har 
                bara 13.3% täckning och min Game/ folder som jag har jobbat med testning på har 98.41% täckning.
            </p>
            <div class="report-img">
                <a href="{{ asset('images/coverage.png') }}" target="_blank">
                    <img src="{{ asset('images/coverage.png') }}" alt="Coverage">
                </a>
            </div>

            <p>Enligt min scrutinizer report har min kod två issues:</p>
            <p style="text-indent: 1.5em;">
                1. I Dicehand.php filen tilldelas variabeln $value ett värde med den används aldrig.
            </p>
            <p style="text-indent: 1.5em;">
                2. I Kernel.php kräver MicroKernelTrait att egenskaper som $name och $instanceof är definierade i klassen.
            </p>
            <div class="issues-img">
                <a href="{{ asset('images/issues.png') }}" target="_blank">
                    <img src="{{ asset('images/issues.png') }}" alt="Issues">
                </a>
            </div>

            <p>
                Ett problem som jag stötte när jag gjorde min första scrutinizer inspection var att den hittade över 4000 issues 
                på filer som jag inte har skrivit eller känner igen. Felet var att jag hade tools/ incheckad och för att lösa det 
                behövde jag lägga till tools/ i min .gitignore fil och sedan gjorde en commit och push. Därefter visade Scrutinizer 
                rätt filer.
            </p>

            <h2>Förbättringar</h2>
            <p>Tre förbättringar som jag väljer att fokusera på är:</p>
            <p style="text-indent: 1.5em;">
                1. Fixa issues i Scrutinizer. I DiceHand.php finns en oanvänd variabel $value och jag väljer att exkludera filen 
                src/Kernel.php. Efter att ha åtgärd dessa issues kommer Scrutinizer issues minska från 2 till 0.
            </p>
            <p style="text-indent: 1.5em;">
                2. Den andra förbättringen som jag fokuserar på är att minska komplexiteten och förbättra underhållbarheten.
            </p>
            <p style="text-indent: 1.5em;">
                3. Den tredje är att öka kodtäckning (Coverage) genom att skriva fler tester.
            </p>
            <p style="text-indent: 1.5em;">
                4. Den sista förbättringen är att sänka den genomsnittliga cyklomatiska komplexiteten per klass i PhpMetrics.
            </p>

            <h3>Resultat</h3>
            <p style="text-indent: 1.5em;">
                1. Efter att ha åtgärdit mina scrutinizer issues, några av dem är från den första inspektionen och några som 
                har uppstått efter att jag gjord kodförbättringar, har jag lyckats få ner antalet issues till 0.
            </p>
            <p style="text-indent: 1.5em;">
                2. Innan jag implementerade mina förbättringar hade min maintainability/complexity många röda cirklar, och 
                efter har jag mest gula och gröna cirklar. Jag fokuserade mest på att skriva DocBlock kommentar på de filer 
                som var röda.
            </p>
            <div class="report-img">
                <a href="{{ asset('images/maintainability-after.png') }}" target="_blank">
                    <img src="{{ asset('images/maintainability-after.png') }}" alt="Maintainabiliy after">
                </a>
            </div>
            <p style="text-indent: 1.5em;">
                3. Genom att skriva fler enhetstester har min coverage gått från 14% till 27% och som ett resultat har mitt scrutinizer 
                poäng ökat lite från 9.96 till 9.97.
            </p>
            <div class="report-img">
                <a href="{{ asset('images/score-after.png') }}" target="_blank">
                    <img src="{{ asset('images/score-after.png') }}" alt="Score after">
                </a>
            </div>
            <p style="text-indent: 1.5em;">
                4. Den genomsnittliga cyklomatiska komplexiteten per klass har jag lyckats ändra lite från 4.80 till 4.64.
            </p>
            <div class="complexity-img">
                <a href="{{ asset('images/average-cyclomatic.png') }}" target="_blank">
                    <img src="{{ asset('images/average-cyclomatic.png') }}" alt="Average Cyclomatic complexity">
                </a>
            </div>

            <h2>Diskussion</h2>
            <p>
                Genom att använda verktyg som PhpMetrics och Scrutinizer kan man arbeta aktivt med kodkvalitet och 'clean code'.
                Använder man dessa verktyg under tiden man arbetar med sin kod, kan man analysera mätvärden som komplexitet, testtäckning 
                och underhållbarhet, och på så sätt identifiera problemområden i koden och åtgärda dem.
            </p>
            <p>
                Fördelarna med att arbeta på detta sättet är att man får en bättre förståelse för sin kod. Den blir mer struktureraed och
                lättare att underhålla, vilket gör det lättare att göra ändringar och minskar risken för buggar och fel. 
            </p>
            <p>
                En neckdel är att det kan vara en tidskrävande process att skriva tester för att öka coverage samt att man 
                spenderar mycket tid på att förbättra maintainability och complexity. 
            </p>
            <p>
                Andra sätt att jobba  mot 'clean code' kan vara att etablera principer som SOLID, DRY, och KISS för att skriva 
                tydlig och underhållbar kod. SOLID står för:
            </p>
                <p>'S - Single Responsibilty Principle' - handlar om att en klass ska bara göra en sak, vilket gör den enklare 
                att förstå och testa.</p>
                <p>'O - Open/closed Principle' - står för att man ska kunna lägga till ny funktion utan att ändra i befintlig kod.</p>
                <p>'L - Liskov Substitution Principle' - man ska kunna byta ut en subklass mot sin basklass utan att programmet slutar 
                funkar.</p> 
                <p>'I - Interface Segregation Principle' - klasser ska inte tvingas implementera metoder de inte använder.</p> 
                <p>'D - Dependency Inversion Principle' - koden ska vara beroende av abstraktioner inte av en annan specifik klass.</p>
            <p>
                DRY står för 'Don't Repeat Yourself' och innebär att man ska undvika att skriva om 
                samma kod. KISS står för 'Keep It Simple, Stupid' och handlar om att kod lösningar ska vara enkla och att unvika 
                onödigt komplexitet. 
            </p>

        </div>
    </main>
{% endblock %}