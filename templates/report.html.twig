{% extends "base.html.twig" %}

{% block title %}Report - MVC Course{% endblock %}

{% block body %}
    <main>
        <div class="report-container">
            <h1>Redovisningstexter</h1>

        <nav class="report-link">
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                <li><a href="#kmom03">Kmom03</a></li>
                <li><a href="#kmom04">Kmom04</a></li>
                <li><a href="#kmom05">Kmom05</a></li>
                <li><a href="#kmom06">Kmom06</a></li>
                <li><a href="#kmom10">Kmom10</a></li>
            </ul>
        </nav>

            <section id="kmom01">
                <h2>Kmom01</h2>
                <p>
                Mina förkunskaper och tidigare erfarenheter kring objektorientering är från oopython-kursen och lite från JavaScript kursen.
                </p><br>

                <p>
                PHPs modell för klasser och objekt följer en objektorienterad modell som gör det möjligt att strukturera kod på ett organiserat
                och återanvändbart sätt. En klass fungerar som en mall som beskriver hur ett objekt ska se ut och bete sig. När man skapar en
                klass definierar man dess egenskaper (variabler) och metoder (funktioner), som båda beskriver objektets beteende.
                </p><br>

                <p>
                Den kodbas och strukturen som används till uppgiften me/report tycker jag att den är i början lite förvirrade, men man blir snabbt
                bekant med sturkturen och känner igen som från tidigare kurser. Det kommer gå några kursmoment innan jag känner mig helt bekväm
                med denna kursens struktur.
                </p><br>

                <p>
                I artikeln "PHP The Right Way" fanns det två områden som jag tyckte var särskilt intressanta att läsa om: "Language Highlights" och 
                "Dependency Management". Delen "Language Highlights" var intressant eftersom den ger en översikt över PHP:s mest användbara 
                språkfunktioner. Den visar hur man kan skriva kod på olika sätt beroende på vilket problem man försöker lösa. Avsnittet om 
                "Objektorienterad programmering" förklarar hur man kan skapa organiserad, strukturerad och återanvändbar kod. "Funktionell 
                programmering" introducerar nya sätt att arbeta med funktioner, och "Namespaces" hjälper till att organisera koden och 
                förhindrar att klassnamn krockar mellan olika bibliotek.
                </p>
                <p>
                Avsnittet "Dependency Management" var fascinerande att läsa om eftersom det förklarar verktyget Composer. Composer gör det 
                enkelt att hantera externa bibliotek och verktyg som behövs för att koden ska fungera. Med Composer kan man specificera vilka 
                bibliotek ett projekt behöver, och verktyget ser till att rätt version installeras och att alla beroenden laddas in automatiskt
                 när man kör sin applikation. På så sätt slipper man ladda ner och installera bibliotek manuellt, vilket sparar mycket tid och 
                 gör projektet mer hanterbart.
                </p><br>

                <p>
                Min TIL för detta kmom är att jag har lärt mig om ramverket Symfony och hur man bygger en webbplats med den.
                </p>
            </section>

            <section id="kmom02">
                <h2>Kmom02</h2>

                <p>
                I PHP används objektorienterade konstruktioner för att skapa flexibel och återanvändbar kod. <strong>Arv</strong> gör det möjligt för en underklass att
                ärva metoder och egenskaper från en förälderklass, vilket skapar en "är-en"-relation. Till exempel kan en Dog klass ärva från Animal för
                att få en eat()-metod. <strong>Komposition</strong> handlar om att skapa komplexa objekt genom att använda andra objekt som egenskaper, istället för att
                använda arv där klasser byggs upp av andra objekt, vilket ger större flexibilitet. Till exempel när en Order-klass innehåller flera Product-objekt.
                <strong>Interface</strong> är som en regelbok som säger vilka metoder en klass måste ha, med implements, utan att bestämma hur de fungerar, som till exempel
                ett PaymentInterface som kräver att alla betalningsklasser implementerar en processPayment()-metod. <strong>Traits</strong> tillåter återanvändning av 
                kod i flera klasser utan att använda arv, genom att definiera metoder som kan användas av flera klasser. Detta gör att man unviker kod upprepning.
                Tillsammans jobbar som så att arv ochb interface sätter upp regler, komposition gör det enkelt att kombinera objekt, och trait minskar upprepning av kod.
                </p><br>

                <p>
                För denna uppgiften har jag implementerat en kortleksapplikation med PHP och Symfony, den består av flera klasser och kontrollers för att
                hantera en kortlek, dra kort och blanda kortleken. Klassen 'Card' representerar ett enskilt med egenskaperna 'suit' (färg) och 'value' (värde).
                Den innehåller metoder för att hämta dessa värden och konvertera kortet till en läsbar sträng med Unicode-symboler. 'DeckOfCards' hanterar
                en hel kortlek med 52 kort. Den innehåller metoder för att: skapa en ny kortlek, blanda kort, dra kort, sortera korten efter färg och värde, samt
                räkna kvarvarande kort. 'CardGameController' hanterar routerna för kortleks applikationen. 'ApiController' innehåller routes för ett JSON API.
                Den hämtar en sorterad korlek (GET /api/deck), blandar och hämtar kortleken (/POST /api/deck/shuffle), och returnerar strukturerad JSON-svar när man 
                drar ett eller flera kort (POST /api/dek/draw), (POST /api/deck/draw/{number}).
                </p><br>
                <p>
                Jag är nöjd med hur jag löste uppgiften. Laddningssidan för kortleken (/card) blev en bra startpunkt där man kan välja vad man vill göra med kortleken,
                och jag tycker korten såg profsiga ut med Unicode-symbolerna. På API-sidan finns alla tillgängliga JSON routes sammanställd i en tabell. Detta ger en bra överblick över vad som webbplatsen
                erbjuder och gör det enkelt att test olika router. Jag är också nöjd med kod strukturen, vilket gör det lätt att hitta en specifik del av koden.
                Några Förbättringspotential i min kod hade varit att skapa en hjälp metod för att minska kodupprepning.
                </p><br>

                <p>
                Mina reflektioner så här långt med att jobba med Symfony och MVC är att det har varit både lärorikt och kul. Ramverket gör det enkelt
                att strukturera koden med modeller, vyer och kontroller, vilket gör koden mer lättläst och underhållbar. I början kändes det lite överväldigande
                men nu kännes det som att jag förstår mer. 
                </p><br>

                <p>
                Min TIL för detta kmom är att jag har lärt mig att bygga grunderna till ett kortspel samt att jag har tränat på objektorientering och hur
                jag skapar mina egna klasser och applikationer i ramverket Symfony.
                </p>
            </section>

            <section id="kmom03">
                <h2>Kmom03</h2>
                <p>
                    Jag tycker att jobba med flödesdiagram och psuedokod är bra då det tvingar en att fundera och tänka genom hur man vill
                    att koden ska fungera. Man får också en bra visuell representation av spelets logik. Det var dock första gången att jag 
                    har jobbat med psuedokod eller flödesdigram och jag var lite osaker hur de skulle se ut, men jag gjorde mitt bästa och 
                    jag kommer säkert bli bättre på det om jag övar lite på hur man ska rita en bra flödesdigram och skriva bra pusedokod.
                    Flödsdigrammen ritade jag på min ipad och psuedokoden skrev jag i en notepad app på datorn, sedan tog jag en screenshot 
                    på dessa och klistrade in de i dokumentationssidan.
                </p><br>

                <p>
                    I min implementation av kortspelsapplikationen återanvände jag mina Card och DeckOfCards klasser från förra kursmomentet.
                    Min CardGame klass representerar ett enskilt kort i spelet. Den lagrar egenskaper såsom kortets färg och värde. DeckOfCardsGame
                    klassen fungerar som en kortlek och hanterar alla kortrelaterade operationer, den skapar en hel kortlek med 52 kort. Player klassen
                    representerar en spelare i kortspelet, den lagrar spelarens namn och hand. Min Game klass hanterar spelets tillstånd och logik 
                    genom att koordinera interaktioner mellan kortleken och spelarna. CardGameController hanterar användareinteraktioner och
                    sessionstillstånd. Jag är nöjd med hur applikationen fungerar. En Förbättringspotential hade varit att implementera de valfria
                    kraven i uppgiften.
                </p><br>

                <p>
                    Att koda i Symfony känns mycket bättre nu än i början på kursen då jag har fått en bättre förståelse för ramverkets
                    struktur. Det kändes väldigt stort och krångligt i början, men nu när jag har fått jobba med ramverket ett tag känns
                    det väldigt bra.
                </p><br>

                <p>
                    Min TIL för detta kursmoment är att problemlösa innan man börjar med att skriva sin kod, genom att till exempel rita en 
                    flödesdiagram eller skriva psuedokod.
                </p>
            </section>

            <section id="kmom04">
                <h2>Kmom04</h2>
                <p>
                    Redovisningstext för kmom04
                </p>
            </section>

            <section id="kmom05">
                <h2>Kmom05</h2>
                <p>
                    Redovisningstext för kmom05
                </p>
            </section>

            <section id="kmom06">
                <h2>Kmom06</h2>
                <p>
                    Redovisningstext för kmom06
                </p>
            </section>

            <section id="kmom10">
                <h2>Kmom10</h2>
                <p>
                    Redovisningstext för kmom10
                </p>
            </section>
        </div>
    </main>
{% endblock %}